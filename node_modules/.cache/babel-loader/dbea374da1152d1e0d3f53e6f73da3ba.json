{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport firebase from '../firebase'; //custom hook for using a form in react\n\nconst useForm = ({\n  initialValues,\n  onSubmit\n}) => {\n  //state based hooks\n  const [values, setValues] = useState(initialValues || {});\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({});\n  const [newAudit, setNewAudit] = useState({}); //function to reset the form\n\n  const resetForm = () => {\n    setValues(initialValues);\n  }; //useRef and useEffect based hooks\n\n\n  const formRendered = useRef(true);\n  useEffect(() => {\n    if (formRendered.current) {\n      setValues(initialValues);\n      setErrors({});\n      setTouched({});\n      setNewAudit(false);\n    }\n\n    formRendered.current = false;\n  }, [initialValues]); //event functions\n\n  const handleChange = e => {\n    const {\n      target\n    } = e;\n    const {\n      name,\n      value\n    } = target;\n    e.persist();\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    if (e) e.preventDefault();\n    setErrors({ ...errors\n    });\n    onSubmit({\n      values,\n      errors\n    });\n    resetForm();\n    const db = firebase.firestore();\n    db.collection('audits').add({\n      name: newAudit\n    });\n  };\n\n  return {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleSubmit\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/Users/seanking/Developer/CSD-SpeEdHub/src/hooks/useForm.js"],"names":["React","useState","useEffect","useRef","firebase","useForm","initialValues","onSubmit","values","setValues","errors","setErrors","touched","setTouched","newAudit","setNewAudit","resetForm","formRendered","current","handleChange","e","target","name","value","persist","handleSubmit","preventDefault","db","firestore","collection","add"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,aAArB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAiC;AAC7C;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAACK,aAAa,IAAI,EAAlB,CAApC;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC,CAL6C,CAQ7C;;AACA,QAAMe,SAAS,GAAG,MAAM;AACpBP,IAAAA,SAAS,CAACH,aAAD,CAAT;AACH,GAFD,CAT6C,CAa7C;;;AACA,QAAMW,YAAY,GAAGd,MAAM,CAAC,IAAD,CAA3B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,YAAY,CAACC,OAAjB,EAA0B;AACtBT,MAAAA,SAAS,CAACH,aAAD,CAAT;AACAK,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH;;AACDE,IAAAA,YAAY,CAACC,OAAb,GAAuB,KAAvB;AACH,GARQ,EAQN,CAACZ,aAAD,CARM,CAAT,CAf6C,CAyB7C;;AACA,QAAMa,YAAY,GAAGC,CAAC,IAAI;AACtB,UAAM;AAAEC,MAAAA;AAAF,QAAaD,CAAnB;AACA,UAAM;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,MAAxB;AACAD,IAAAA,CAAC,CAACI,OAAF;AACAf,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACc,IAAD,GAAQC;AAArB,KAAD,CAAT;AACH,GALD;;AAOA,QAAME,YAAY,GAAGL,CAAC,IAAI;AACtB,QAAIA,CAAJ,EAAOA,CAAC,CAACM,cAAF;AACPf,IAAAA,SAAS,CAAC,EAAE,GAAGD;AAAL,KAAD,CAAT;AACAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,MAAF;AAAUE,MAAAA;AAAV,KAAD,CAAR;AACAM,IAAAA,SAAS;AACT,UAAMW,EAAE,GAAGvB,QAAQ,CAACwB,SAAT,EAAX;AACAD,IAAAA,EAAE,CAACE,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4B;AAACR,MAAAA,IAAI,EAAER;AAAP,KAA5B;AACH,GAPD;;AASA,SAAO;AACHN,IAAAA,MADG;AAEHE,IAAAA,MAFG;AAGHE,IAAAA,OAHG;AAIHO,IAAAA,YAJG;AAKHM,IAAAA;AALG,GAAP;AAOH,CAjDD;;AAmDA,eAAepB,OAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport firebase from '../firebase'\n\n//custom hook for using a form in react\nconst useForm = ({ initialValues, onSubmit }) => {\n    //state based hooks\n    const [values, setValues] = useState(initialValues || {});\n    const [errors, setErrors] = useState({});\n    const [touched, setTouched] = useState({})\n    const [newAudit, setNewAudit] = useState({});\n\n\n    //function to reset the form\n    const resetForm = () => {\n        setValues(initialValues)\n    }\n\n    //useRef and useEffect based hooks\n    const formRendered = useRef(true)\n    useEffect(() => {\n        if (formRendered.current) {\n            setValues(initialValues);\n            setErrors({});\n            setTouched({});\n            setNewAudit(false);\n        }\n        formRendered.current = false;\n    }, [initialValues]);\n\n    //event functions\n    const handleChange = e => {\n        const { target } = e;\n        const { name, value } = target;\n        e.persist();\n        setValues({ ...values, [name]: value });\n    };\n\n    const handleSubmit = e => {\n        if (e) e.preventDefault();\n        setErrors({ ...errors });\n        onSubmit({ values, errors });\n        resetForm();\n        const db = firebase.firestore()\n        db.collection('audits').add({name: newAudit})\n    }\n\n    return {\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleSubmit,\n    };\n}\n\nexport default useForm\n"]},"metadata":{},"sourceType":"module"}